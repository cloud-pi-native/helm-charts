# -- Provide a name in place of the default application name.
nameOverride: ""
# -- String to fully override the default application name.
fullnameOverride: ""

# Image credentials configuration.
imageCredentials:
  # -- Registry to pull images from.
  registry: ""
  # -- Username to pull images.
  username: ""
  # -- Password to pull images.
  password: ""
  # -- Email to pull images.
  email: ""

# Cloud Pi Native (CPN) configuration file.
config:
  # -- Whether or not helm should create the console config.
  create: false
  # -- Name of the genrated config.
  name: "dso-config"
  # -- Projects root directory to use in other services such as Gitlab, etc.
  projectsRootDir: "forge"
  # -- Secrets to inject into the configuration.
  # It is needed for server to get services informations such as urls, admin username, admin password or token, etc.
  secrets: {}
    # ARGO_NAMESPACE: "dso-argocd"
    # ARGOCD_URL: "https://argocd.domain.local"
    # GITLAB_TOKEN: ""
    # GITLAB_URL: "https://gitlab.domain.local"
    # HARBOR_ADMIN: "admin"
    # HARBOR_ADMIN_PASSWORD: ""
    # HARBOR_URL: "https://harbor.domain.local"
    # KEYCLOAK_ADMIN: "admin"
    # KEYCLOAK_ADMIN_PASSWORD: ""
    # KEYCLOAK_URL: "https://keycloak.domain.local"
    # NEXUS_ADMIN: "admin"
    # NEXUS_ADMIN_PASSWORD: ""
    # NEXUS_URL: "https://nexus.domain.local"
    # SONAR_API_TOKEN: ""
    # SONARQUBE_URL: "https://sonar.domain.local"
    # VAULT_TOKEN: ""
    # VAULT_URL: "https://vault.domain.local"

# Global configuration.
global:
  # -- Map of environment variables to inject into backend and frontend containers.
  env:
    NODE_ENV: "production"
  # -- Map of environment variables to inject into backend and frontend containers.
  secrets: {}
  ## Global informations about the Keycloak instance that will be shared to the server and client.
  keycloak:
    # Keycloak domain used for authentication.
    domain:
      # -- Keycloak domain used for Console CPN server.
      backend: "keycloak.namespace.svc.cluster.local"
      # -- Keycloak domain used for Console CPN client.
      frontend: "keycloak.domain.com"
    # -- Name of the keycloak realm used for authentication.
    realm: "cloud-pi-native"
    # Protocol used to communicate with keycloak for authentication.
    protocol:
      # -- Keycloak protocol used for Console CPN server.
      backend: "http"
      # -- Keycloak protocol used for Console CPN client.
      frontend: "https"
    ## Keycloak client ids.
    clientIds:
      # -- Keycloak clientId used for Console CPN server.
      backend: "console-backend"
      # -- Keycloak clientId used for Console CPN client.
      frontend: "console-frontend"
    clientSecrets:
      # -- Keycloak clientSecret used for Console CPN server.
      backend: ""
    # -- Keycloak redirect uri used with keycloak.
    redirectUri: "https://console.dso.local"
    # -- Session secret used to store keycloak session for Console CPN client.
    sessionSecret: "a-very-strong-secret-with-more-than-32-char"
    # -- Whether or not to deploy the keycloak dev realm into a configmap named `keycloak-realm-dev`.
    devRealm: false
  postgresql:
    # -- Name of the secret to use to connect to external CNPG-managed DB
    cnpgSecretName: ""
    # -- Postgres database connection string used to override computed db url, usefull if external database.
    ## For postgres it should look like this "postgresql://db_user:db_password@db_service:db_port/db_name?schema=public"
    dbUrl: ""


# Ingress configuration
ingress:
  # -- Whether or not ingress should be enabled.
  enabled: true
  # -- Defines which ingress controller will implement the resource.
  className: ""
  # -- Additional ingress annotations.
  annotations: {}
  # -- Additional ingress labels.
  labels: {}
  # -- The list of hosts to be covered by ingress record.
  hosts:
  - "console.dso.local"
  # -- Enable TLS configuration.
  tls: []
  # - secretName: console.dso.local-tls
  #   hosts:
  #   - console.dso.local

# Console CPN client configuration.
client:
  # -- The number of application controller pods to run.
  replicaCount: 1
  ## Console CPN client image
  image:
    # -- Repository to use for the Console CPN client.
    repository: "ghcr.io/cloud-pi-native/console/client"
    # -- Image pull policy for the Console CPN client.
    pullPolicy: "Always"
    # -- Tag to use for the Console CPN client.
    ## Overrides the image tag whose default is the chart appVersion.
    tag: ""
  # -- Annotations for the Console CPN client deployed pods.
  podAnnotations: {}
  # -- Labels for the Console CPN client deployed pods.
  podLabels: {}
  # -- Toggle and define pod-level security context.
  podSecurityContext: {}
    # fsGroup: 2000
  # -- Init containers to add to the Console CPN client pod.
  initContainers: []
  # - name: wait-for-keycloak
  #   image: docker.io/curlimages/curl:latest
  #   command:
  #   - "/bin/sh"
  #   - "-c"
  #   args:
  #   - "while [ $(curl -sw '%{http_code}' http://webserver.svc.cluster.local -o /dev/null) -ne 200 ]; do sleep 5; echo 'Waiting for the webserver...'; done"
  #   volumeMounts:
  #   - mountPath: /custom-volume
  #     name: custom-volume
  container:
    # -- Console CPN client container port.
    port: 8080
    # -- Console CPN client container command.
    command: []
    # -- Console CPN client container command args.
    args: []
    # -- Toggle and define container-level security context.
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
  # -- Extra containers to add to the Console CPN client pod as sidecars.
  extraContainers: []
  # - name: fluentd
  #   image: "fluentd"
  #   volumeMounts:
  #     - mountPath: /my-volume/config
  #       name: config
  # -- Console CPN client container env variables loaded from configmap or secret reference.
  envFrom: []
  # - configMapRef:
  #     name: my-config
  # - secretRef:
  #     name: my-secret
  # -- Console CPN client container env variables, it will be injected into a configmap and loaded into the container.
  env: {}
  # -- Console CPN client container env secrets, it will be injected into a secret and loaded into the container.
  secrets: {}
  # -- Console CPN client container healthcheck endpoint.
  healthcheckPath: "/"
  ## Deployment strategy for CPN client deployment.
  strategy:
    # -- Strategy type used to replace old Pods by new ones, can be "Recreate" or "RollingUpdate".
    type: "RollingUpdate"
  ## Startup probe for Console CPN client.
  startupProbe:
    # -- Whether or not enable the probe.
    enabled: true
    # -- Number of seconds after the container has started before probe is initiated.
    initialDelaySeconds: 0
    # -- Minimum consecutive successes for the probe to be considered successful after having failed.
    successThreshold: 1
    # -- Minimum consecutive failures for the probe to be considered failed after having succeeded.
    failureThreshold: 10
    # -- How often (in seconds) to perform the probe.
    periodSeconds: 10
    # -- Number of seconds after which the probe times out.
    timeoutSeconds: 5
  ## Readiness probe for Console CPN client.
  readinessProbe:
    # -- Whether or not enable the probe.
    enabled: true
    # -- Number of seconds after the container has started before probe is initiated.
    initialDelaySeconds: 15
    # -- Minimum consecutive successes for the probe to be considered successful after having failed.
    successThreshold: 2
    # -- Minimum consecutive failures for the probe to be considered failed after having succeeded.
    failureThreshold: 2
    # -- How often (in seconds) to perform the probe.
    periodSeconds: 10
    # -- Number of seconds after which the probe times out.
    timeoutSeconds: 5
  ## Liveness probe for Console CPN client.
  livenessProbe:
    # -- Whether or not enable the probe.
    enabled: true
    # -- Number of seconds after the container has started before probe is initiated.
    initialDelaySeconds: 30
    # -- Minimum consecutive successes for the probe to be considered successful after having failed.
    successThreshold: 1
    # -- Minimum consecutive failures for the probe to be considered failed after having succeeded.
    failureThreshold: 3
    # -- How often (in seconds) to perform the probe.
    periodSeconds: 30
    # -- Number of seconds after which the probe times out
    timeoutSeconds: 5
  # -- Host aliases that will be injected at pod-level into /etc/hosts.
  hostAliases: []
  # - ip: "127.0.0.1"
  #   hostnames:
  #   - "foo.local"
  #   - "bar.local"
  # - ip: "10.1.2.3"
  #   hostnames:
  #   - "foo.remote"
  #   - "bar.remote"
  # -- List of extra volumes to add.
  extraVolumes: []
  # - name: extra-vol
  #   path: /host/path
  #   type: hostPath
  # - name: extra-vol-cm
  #   type: configMap
  # -- List of extra mounts to add (normally used with extraVolumes).
  extraVolumeMounts: []
  # - name: extra-vol
  #   mountPath: /volume/path
  # - name: extra-vol-cm
  #   mountPath: /volume/cm/path
  service:
    # -- Console CPN client service type.
    type: "ClusterIP"
    # -- Console CPN client service port.
    port: 80
  resources:
    requests:
      # -- Memory request for the Console CPN client.
      memory: "128Mi"
      # -- CPU request for the Console CPN client.
      cpu: "250m"
    limits:
      # -- Memory limit for the Console CPN client.
      memory: "512Mi"
      # -- CPU limit for the Console CPN client.
      cpu: "500m"
  ## Console CPN client Horizontal Pod Autoscaler
  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Console CPN client.
    enabled: false
    # -- Minimum number of replicas for the Console CPN client [HPA].
    minReplicas: 1
    # -- Maximum number of replicas for the Console CPN client [HPA].
    maxReplicas: 3
    # -- Average CPU utilization percentage for the Console CPN client [HPA].
    targetCPUUtilizationPercentage: 80
    # -- Average memory utilization percentage for the Console CPN client [HPA].
    targetMemoryUtilizationPercentage: 80
  # -- Default node selector for Console CPN client.
  nodeSelector: {}
  # -- Default tolerations for Console CPN client.
  tolerations: []
  # -- Default affinity for Console CPN client.
  affinity: {}

# Console CPN server configuration.
server:
  # -- The number of application controller pods to run.
  replicaCount: 1
  ## Console CPN server image.
  image:
    # -- Repository to use for the Console CPN server.
    repository: "ghcr.io/cloud-pi-native/console/server"
    # -- Image pull policy for the Console CPN server.
    pullPolicy: "Always"
    # -- Tag to use for the Console CPN server.
    ## Overrides the image tag whose default is the chart appVersion.
    tag: ""
  # -- Annotations for the Console CPN server deployed pods.
  podAnnotations: {}
  # -- Labels for the Console CPN server deployed pods.
  podLabels: {}
  # -- Toggle and define pod-level security context.
  podSecurityContext: {}
    # fsGroup: 2000
  # -- Init containers to add to the Console CPN client pod.
  initContainers: []
  # - name: wait-for-keycloak
  #   image: docker.io/curlimages/curl:latest
  #   command:
  #   - "/bin/sh"
  #   - "-c"
  #   args:
  #   - "while [ $(curl -sw '%{http_code}' http://webserver.svc.cluster.local -o /dev/null) -ne 200 ]; do sleep 5; echo 'Waiting for the webserver...'; done"
  #   volumeMounts:
  #   - mountPath: /custom-volume
  #     name: custom-volume
  container:
    # -- Console CPN server container port.
    port: 8080
    # -- Console CPN server container command.
    command: []
    # -- Console CPN server container command args.
    args: []
    # -- Toggle and define container-level security context.
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
  # -- Extra containers to add to the Console CPN server pod as sidecars.
  extraContainers: []
  # - name: fluentd
  #   image: "fluentd"
  #   volumeMounts:
  #     - mountPath: /my-volume/config
  #       name: config
  # -- Console CPN server container env variables loaded from configmap or secret reference.
  envFrom: []
  # - configMapRef:
  #     name: my-config
  # - secretRef:
  #     name: my-secret
  # -- Console CPN server container env variables, it will be injected into a configmap and loaded into the container.
  env: {}
    ## csv list of plugins to disabled
    # DISABLED_PLUGINS: ""
  # -- Console CPN server container env secrets, it will be injected into a secret and loaded into the container.
  secrets: {}
  # -- Name of the configmap with javascript data that need to be imported by the server at start up.
  dbDataCm: ""
  # -- Console CPN server container healthcheck endpoint.
  healthcheckPath: "/api/v1/healthz"
  ## Deployment strategy for CPN server deployment.
  strategy:
    # -- Strategy type used to replace old Pods by new ones, can be "Recreate" or "RollingUpdate".
    type: "RollingUpdate"
  ## Startup probe for Console CPN server.
  startupProbe:
    # -- Whether or not enable the probe.
    enabled: true
    # -- Number of seconds after the container has started before probe is initiated.
    initialDelaySeconds: 0
    # -- Minimum consecutive successes for the probe to be considered successful after having failed.
    successThreshold: 1
    # -- Minimum consecutive failures for the probe to be considered failed after having succeeded.
    failureThreshold: 10
    # -- How often (in seconds) to perform the probe.
    periodSeconds: 10
    # -- Number of seconds after which the probe times out.
    timeoutSeconds: 5
  ## Readiness probe for Console CPN server.
  readinessProbe:
    # -- Whether or not enable the probe.
    enabled: true
    # -- Number of seconds after the container has started before probe is initiated.
    initialDelaySeconds: 15
    # -- Minimum consecutive successes for the probe to be considered successful after having failed.
    successThreshold: 2
    # -- Minimum consecutive failures for the probe to be considered failed after having succeeded.
    failureThreshold: 2
    # -- How often (in seconds) to perform the probe.
    periodSeconds: 10
    # -- Number of seconds after which the probe times out.
    timeoutSeconds: 5
  ## Liveness probe for Console CPN server.
  livenessProbe:
    # -- Whether or not enable the probe.
    enabled: true
    # -- Whether or not enable the probe.
    initialDelaySeconds: 30
    # -- Number of seconds after the container has started before probe is initiated.
    successThreshold: 1
    # -- Minimum consecutive successes for the probe to be considered successful after having failed.
    failureThreshold: 3
    # -- Minimum consecutive failures for the probe to be considered failed after having succeeded.
    periodSeconds: 30
    # -- How often (in seconds) to perform the probe.
    timeoutSeconds: 5
  # -- Host aliases that will be injected at pod-level into /etc/hosts.
  hostAliases: []
  # - ip: "127.0.0.1"
  #   hostnames:
  #   - "foo.local"
  #   - "bar.local"
  # - ip: "10.1.2.3"
  #   hostnames:
  #   - "foo.remote"
  #   - "bar.remote"
  ## Extra certificate to add to the container, it should be provide as a configmap.
  extraCa:
    # -- The name of the configmap in namespace where certificates are stored.
    name: ""
    # -- The key to lookup.
    key: ""
    # -- The path inside the container where the certificate file should be mount.
    # This is a native Nodejs environment variable to extends certificates, see: https://nodejs.org/api/cli.html#node_extra_ca_certsfile.
    # This mount path represent the subpath to use under the `/config` config root path.
    mountSubPath: "ca_certs"
  # -- List of extra volumes to add.
  extraVolumes: []
  # - name: extra-vol
  #   path: /host/path
  #   type: hostPath
  # - name: extra-vol-cm
  #   type: configMap
  # -- List of extra mounts to add (normally used with extraVolumes)
  extraVolumeMounts: []
  # - name: extra-vol
  #   mountPath: /volume/path
  # - name: extra-vol-cm
  #   mountPath: /volume/cm/path
  service:
    # -- Console CPN server service type.
    type: "ClusterIP"
    # -- Console CPN server service port.
    port: 80
  fetchContainer:
    # -- Image used to fetch plugins inside the initContainer.
    image: docker.io/wbitt/network-multitool:alpine-minimal
    # -- Image pull policy to fetch plugins inside the initContainer.
    pullPolicy: "IfNotPresent"
  # -- List of zips to download; basically curl url, unzip and stores it in plugins/external/<dir_name>.
  plugins: []
  # -- CSV list of plugins to disabled.
  disabledPlugins: ""
  resources:
    requests:
      # -- Memory request for the Console CPN server.
      memory: "128Mi"
      # -- CPU request for the Console CPN server.
      cpu: "250m"
    limits:
      # -- Memory limit for the Console CPN server.
      memory: "512Mi"
      # -- CPU limit for the Console CPN server.
      cpu: "500m"
  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Console CPN server.
    enabled: false
    # -- Minimum number of replicas for the Console CPN server [HPA].
    minReplicas: 1
    # -- Maximum number of replicas for the Console CPN server [HPA].
    maxReplicas: 3
    # -- Average CPU utilization percentage for the Console CPN server [HPA].
    targetCPUUtilizationPercentage: 80
    # -- Average memory utilization percentage for the Console CPN server [HPA].
    targetMemoryUtilizationPercentage: 80
  # -- Default node selector for Console CPN server.
  nodeSelector: {}
  # -- Default tolerations for Console CPN server.
  tolerations: []
  # -- Default affinity for Console CPN server.
  affinity: {}
  serviceAccount:
    # -- Create a service account for the Console CPN server.
    create: true
    # -- Annotations applied to created service account.
    annotations: {}
    # -- Service account name.
    name: "cpn-console-server"

# CNPG operator configuration
cnpg-operator:
  # -- Whether or not cnpg operator should be deployed.
  enabled: false

# CNPG configuration
cnpg:
  # -- Whether or not cnpg cluster deployment should be enabled.
  enabled: false
  # -- Provide a name in place of the default cnpg cluster name.
  # The cnpg operator adds the cluster name to S3's `destinationPath`, so it is necessary to provide the exact match of the main cluster when using `replica` or `restore` mode.
  nameOverride: &cnpgNameOverride ""
  # -- Number of instances to spawn in the cluster.
  instances: 3
  # -- Name of the image used for database.
  # By default (empty string), the operator will install the latest available minor version of the latest major version of PostgreSQL when the operator was released
  imageName: ""
  # -- Username of the database user.
  username: "dso"
  # -- Name of the database.
  dbName: "dso-console-db"
  # -- Enable superuser access.
  enableSuperuserAccess: true
  # -- Rolling update strategy used :
  # unsupervised: automated update of the primary once all replicas have been upgraded (default)
  # supervised: requires manual supervision to perform the switchover of the primary
  primaryUpdateStrategy: "unsupervised"
  # -- Size of the data PVC used by each cnpg instance.
  pvcSize: "10Gi"
  # -- Size of the WAL PVC used by each cnpg instance (if value is `null` then WAL files are stored within the data PVC).
  walPvcSize: null
  # -- Maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
  # Default retains an unlimited amount of WAL files.
  # See: https://cloudnative-pg.io/documentation/current/replication/#capping-the-wal-size-retained-for-replication-slots (Refer to postgresql.conf for memory units).
  postgresWalMaxSlotKeepSize: ""
  # -- Additional cnpg cluster annotations.
  annotations: {}
  # -- Additional cnpg cluster labels.
  labels: {}
  # -- Whether or not a NodePort service should be created to exposed the database.
  exposed: false
  # -- Port used for NodePort service. Needs `exposed` tu be true.
  nodePort:
  # -- Mode used to deploy the cnpg cluster, it should be `primary`, `replica` or `restore`.
  mode: "primary"
  replica:
    # -- Primary cnpg cluster host used for replica mode.
    host: ""
    # -- Primary cnpg cluster port used for replica mode.
    port: 5432
  backup:
    # -- Whether or not cnpg cluster deployment should be enabled.
    enabled: false
    # -- S3 destination path for cnpg backups (it should be set like `s3://<bucket_name>/<path>`).
    destinationPath: ""
    # -- S3 endpoint for cnpg backups.
    endpointURL: ""
    endpointCA:
      # -- The secret name containing S3 CA for cnpg backups.
      name: ""
      # -- The secret key containing S3 CA for cnpg backups.
      key: ""
    s3Credentials:
      # -- Whether or not to create kuebernetes secret used for cnpg backups.
      # It will use `name`, `accessKeyId.key`, `accessKeyId.value`, `secretAccessKey.key` and `secretAccessKey.value` to create the secret.
      create: false
      # -- S3 kuebernetes secret name used for cnpg backups.
      secretName: *cnpgNameOverride
      accessKeyId:
        # -- S3 accessKeyId kubernetes secret key used for cnpg backups.
        key: "accessKeyId"
        # -- S3 accessKeyId value used for cnpg backups.
        # Only needed if `backup.s3Credentials.create` is set to `true`.
        value: ""
      secretAccessKey:
        # -- S3 secretAccessKey kubernetes secret key used for cnpg backups.
        key: "secretAccessKey"
        # -- S3 secretAccessKey value used for cnpg backups.
        # Only needed if `backup.s3Credentials.create` is set to `true`.
        value: ""
    # -- The number of parallel process that will be applied when applying wals.
    maxParallelWal: 8
    # -- Recovery target config to perform a point in time recovery when restore.
    recoveryTarget: {}
    # backupID: 20250214T120000
    # targetImmediate: true
    # -- Which compression algorithm should be used for cnpg backups (should be one of "gzip", "bzip2" or "snappy").
    compression: ""
    # -- The cron rule used for cnpg backups. By default it runs every 6 hours.
    cron: "0 0 */6 * * *"
    # -- Retention policy for cnpg backups recurrences.
    retentionPolicy: "30d"

# -- Set of feature settings - experimental
features:
  # -- vault secrets support
  vaultSecrets:
    # -- enabling vault secret
    enabled: true

# Postgresql configuration.
## Ref: https://artifacthub.io/packages/helm/bitnami/postgresql
postgresql:
  enabled: true
  nameOverride: "cpn-console-db"
  architecture: "standalone"
  auth:
    postgresPassword: "default"
    username: "default"
    password: "default"
    database: "default"
  image:
    repository: bitnamilegacy/postgresql
  primary:
    service:
      type: "ClusterIP"
      ports:
        postgresql: 5432
    persistence:
      size: "1Gi"
    resources:
      requests:
        memory: "128Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  readReplicas:
    persistence:
      size: "1Gi"

# Keycloak configuration.
## Ref: https://artifacthub.io/packages/helm/bitnami/keycloak
keycloak:
  enabled: false
  nameOverride: "cpn-keycloak"
  auth:
    adminUser: "default"
    adminPassword: "default"
  image:
    repository: bitnamilegacy/keycloak
  ingress:
    enabled: true
    ingressClassName: ""
    annotations: {}
    hostname: "keycloak.dso.local"
    path: "/"
    tls: false
    secrets: []
  production: true
  proxy: "edge"
  tls:
    enabled: false
    autoGenerated: false
  postgresql:
    nameOverride: "cpn-keycloak-db"
    enabled: true
    auth:
      postgresPassword: "default"
      username: "default"
      password: "default"
      database: "default"
      architecture: "standalone"
    primary:
      service:
        type: "ClusterIP"
        ports:
          postgresql: 5432
      persistence:
        size: "1Gi"
      resources:
        requests:
          memory: "128Mi"
          cpu: "250m"
        limits:
          memory: "512Mi"
          cpu: "500m"
    readReplicas:
      persistence:
        size: "1Gi"
